{"version":3,"sources":["../../src/configs/passport.js"],"names":["passportSetup","passport","use","localStrategy","username","password","done","user","result","User","findOne","bcrypt","compare","err","serializeUser","id","deserializeUser","_id"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,aAAa,GAAIC,QAAD,IAAc;AAClCA,EAAAA,QAAQ,CAACC,GAAT,CACE,IAAIC,uBAAJ;AAAA,iCAAkB,WAAOC,QAAP,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAoC;AACpD,UAAIC,IAAJ;AACA,UAAIC,MAAJ;;AACA,UAAI;AACFD,QAAAA,IAAI,SAASE,cAAKC,OAAL,CAAa;AAAEN,UAAAA,QAAQ,EAAEA;AAAZ,SAAb,CAAb;AACA,YAAI,CAACG,IAAL,EAAW,OAAOD,IAAI,CAAC,IAAD,EAAO,KAAP,CAAX;AACXE,QAAAA,MAAM,SAASG,gBAAOC,OAAP,CAAeP,QAAf,EAAyBE,IAAI,CAACF,QAA9B,CAAf;;AACA,YAAIG,MAAM,KAAK,IAAf,EAAqB;AACnB,iBAAOF,IAAI,CAAC,IAAD,EAAOC,IAAP,CAAX;AACD,SAFD,MAEO;AACL,iBAAOD,IAAI,CAAC,IAAD,EAAO,KAAP,CAAX;AACD;AACF,OATD,CASE,OAAOO,GAAP,EAAY;AACZ,cAAMA,GAAN;AACD;AACF,KAfD;;AAAA;AAAA;AAAA;AAAA,MADF;AAkBAZ,EAAAA,QAAQ,CAACa,aAAT,CAAuB,CAACP,IAAD,EAAOD,IAAP,KAAgB;AACrCA,IAAAA,IAAI,CAAC,IAAD,EAAOC,IAAI,CAACQ,EAAZ,CAAJ;AACD,GAFD;AAGAd,EAAAA,QAAQ,CAACe,eAAT;AAAA,kCAAyB,WAAOD,EAAP,EAAWT,IAAX,EAAoB;AAC3CG,oBAAKC,OAAL,CAAa;AAAEO,QAAAA,GAAG,EAAEF;AAAP,OAAb,EAA0B,CAACF,GAAD,EAAMN,IAAN,KAAe;AACvCD,QAAAA,IAAI,CAACO,GAAD,EAAMN,IAAN,CAAJ;AACD,OAFD;AAGD,KAJD;;AAAA;AAAA;AAAA;AAAA;AAKD,CA3BD;;eA6BeP,a","sourcesContent":["import bcrypt from \"bcrypt\";\nimport User from \"../models/user\";\nimport { Strategy as localStrategy } from \"passport-local\";\n\nconst passportSetup = (passport) => {\n  passport.use(\n    new localStrategy(async (username, password, done) => {\n      let user;\n      let result;\n      try {\n        user = await User.findOne({ username: username });\n        if (!user) return done(null, false);\n        result = await bcrypt.compare(password, user.password);\n        if (result === true) {\n          return done(null, user);\n        } else {\n          return done(null, false);\n        }\n      } catch (err) {\n        throw err;\n      }\n    })\n  );\n  passport.serializeUser((user, done) => {\n    done(null, user.id);\n  });\n  passport.deserializeUser(async (id, done) => {\n    User.findOne({ _id: id }, (err, user) => {\n      done(err, user);\n    });\n  });\n};\n\nexport default passportSetup;\n"],"file":"passport.js"}